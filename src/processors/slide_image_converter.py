"""Slide Image Converter.

This module converts PowerPoint slides to images for multimodal AI analysis.
"""

import os
import tempfile
from typing import Dict, List, Optional, Tuple
from pathlib import Path
import subprocess
from dataclasses import dataclass
from loguru import logger
from PIL import Image
import io


@dataclass
class SlideImage:
    """Represents a converted slide image.
    
    Attributes:
        slide_number: Slide number (1-based)
        image_bytes: Image data as bytes
        image_format: Image format (PNG, JPEG, etc.)
        width: Image width in pixels
        height: Image height in pixels
        file_size: Image file size in bytes
    """
    slide_number: int
    image_bytes: bytes
    image_format: str
    width: int
    height: int
    file_size: int


class SlideImageConverter:
    """Converts PowerPoint slides to images for AI analysis.
    
    This class provides functionality to convert PowerPoint presentations
    to individual slide images optimized for multimodal AI analysis.
    """
    
    def __init__(self):
        """Initialize slide image converter."""
        self.output_format = "PNG"
        self.output_quality = 95
        self.max_width = 1920
        self.max_height = 1080
        logger.info("Initialized slide image converter")
    
    def _check_libreoffice_available(self) -> bool:
        """Check if LibreOffice is available for conversion.
        
        Returns:
            True if LibreOffice is available, False otherwise
        """
        try:
            result = subprocess.run(
                ["libreoffice", "--version"],
                capture_output=True,
                text=True,
                timeout=10
            )
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def _convert_with_libreoffice(self, pptx_path: str, output_dir: str) -> List[str]:
        """Convert PowerPoint to images using LibreOffice.
        
        Args:
            pptx_path: Path to PowerPoint file
            output_dir: Directory for output images
            
        Returns:
            List of generated image file paths
            
        Raises:
            Exception: If conversion fails
        """
        try:
            # Convert PowerPoint to PDF first
            pdf_output_dir = tempfile.mkdtemp()
            
            cmd = [
                "libreoffice",
                "--headless",
                "--convert-to", "pdf",
                "--outdir", pdf_output_dir,
                pptx_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            
            if result.returncode != 0:
                raise Exception(f"LibreOffice conversion failed: {result.stderr}")
            
            # Find generated PDF
            pdf_files = list(Path(pdf_output_dir).glob("*.pdf"))
            if not pdf_files:
                raise Exception("No PDF generated by LibreOffice")
            
            pdf_path = str(pdf_files[0])
            
            # Convert PDF pages to images using ImageMagick or similar
            return self._convert_pdf_to_images(pdf_path, output_dir)
            
        except Exception as e:
            logger.error(f"LibreOffice conversion failed: {str(e)}")
            raise
    
    def _convert_pdf_to_images(self, pdf_path: str, output_dir: str) -> List[str]:
        """Convert PDF pages to images.
        
        Args:
            pdf_path: Path to PDF file
            output_dir: Directory for output images
            
        Returns:
            List of generated image file paths
        """
        try:
            # Try using ImageMagick convert command
            cmd = [
                "convert",
                "-density", "150",
                "-quality", str(self.output_quality),
                pdf_path,
                os.path.join(output_dir, "slide_%03d.png")
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            
            if result.returncode != 0:
                # Fallback: try with different ImageMagick syntax
                cmd = [
                    "magick",
                    "convert",
                    "-density", "150",
                    "-quality", str(self.output_quality),
                    pdf_path,
                    os.path.join(output_dir, "slide_%03d.png")
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
                
                if result.returncode != 0:
                    raise Exception(f"ImageMagick conversion failed: {result.stderr}")
            
            # Find generated images
            image_files = sorted(list(Path(output_dir).glob("slide_*.png")))
            return [str(f) for f in image_files]
            
        except Exception as e:
            logger.error(f"PDF to image conversion failed: {str(e)}")
            raise
    
    def _fallback_conversion(self, pptx_path: str) -> List[SlideImage]:
        """Fallback conversion method using python-pptx.
        
        Args:
            pptx_path: Path to PowerPoint file
            
        Returns:
            List of SlideImage objects (may be empty if conversion fails)
        """
        try:
            from pptx import Presentation
            from pptx.enum.shapes import MSO_SHAPE_TYPE
            
            presentation = Presentation(pptx_path)
            slide_images = []
            
            # Create placeholder images for each slide
            for i, slide in enumerate(presentation.slides, 1):
                # Create a simple placeholder image
                placeholder_image = Image.new('RGB', (1920, 1080), color='white')
                
                # Convert to bytes
                img_buffer = io.BytesIO()
                placeholder_image.save(img_buffer, format='PNG')
                image_bytes = img_buffer.getvalue()
                
                slide_image = SlideImage(
                    slide_number=i,
                    image_bytes=image_bytes,
                    image_format="PNG",
                    width=1920,
                    height=1080,
                    file_size=len(image_bytes)
                )
                
                slide_images.append(slide_image)
                logger.debug(f"Created placeholder image for slide {i}")
            
            logger.warning(f"Used fallback conversion for {len(slide_images)} slides")
            return slide_images
            
        except Exception as e:
            logger.error(f"Fallback conversion failed: {str(e)}")
            return []
    
    def convert_presentation_to_images(self, pptx_path: str) -> Dict[int, bytes]:
        """Convert PowerPoint presentation to slide images.
        
        Args:
            pptx_path: Path to PowerPoint file
            
        Returns:
            Dictionary mapping slide numbers to image bytes
            
        Raises:
            Exception: If conversion fails completely
        """
        try:
            output_dir = tempfile.mkdtemp()
            slide_images = {}
            
            # Try LibreOffice conversion first
            if self._check_libreoffice_available():
                try:
                    image_files = self._convert_with_libreoffice(pptx_path, output_dir)
                    
                    # Load images and create SlideImage objects
                    for i, image_file in enumerate(image_files, 1):
                        with open(image_file, 'rb') as f:
                            image_bytes = f.read()
                        
                        slide_images[i] = image_bytes
                        logger.debug(f"Loaded image for slide {i}: {len(image_bytes)} bytes")
                    
                    logger.info(f"Successfully converted {len(slide_images)} slides using LibreOffice")
                    return slide_images
                    
                except Exception as e:
                    logger.warning(f"LibreOffice conversion failed, trying fallback: {str(e)}")
            
            # Fallback conversion
            fallback_images = self._fallback_conversion(pptx_path)
            
            for slide_image in fallback_images:
                slide_images[slide_image.slide_number] = slide_image.image_bytes
            
            if not slide_images:
                raise Exception("All conversion methods failed")
            
            logger.info(f"Converted {len(slide_images)} slides to images")
            return slide_images
            
        except Exception as e:
            logger.error(f"Slide image conversion failed: {str(e)}")
            raise Exception(f"Could not convert slides to images: {str(e)}")
    
    def optimize_image_for_analysis(self, image_bytes: bytes) -> bytes:
        """Optimize image for multimodal AI analysis.
        
        Args:
            image_bytes: Original image bytes
            
        Returns:
            Optimized image bytes
        """
        try:
            # Load image
            image = Image.open(io.BytesIO(image_bytes))
            
            # Convert to RGB if necessary
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Resize if too large
            if image.width > self.max_width or image.height > self.max_height:
                image.thumbnail((self.max_width, self.max_height), Image.Resampling.LANCZOS)
                logger.debug(f"Resized image to {image.width}x{image.height}")
            
            # Save optimized image
            output_buffer = io.BytesIO()
            image.save(output_buffer, format='PNG', optimize=True, quality=self.output_quality)
            optimized_bytes = output_buffer.getvalue()
            
            logger.debug(f"Optimized image: {len(image_bytes)} -> {len(optimized_bytes)} bytes")
            return optimized_bytes
            
        except Exception as e:
            logger.warning(f"Image optimization failed: {str(e)}")
            return image_bytes  # Return original if optimization fails
    
    def get_image_info(self, image_bytes: bytes) -> Dict[str, any]:
        """Get information about an image.
        
        Args:
            image_bytes: Image bytes
            
        Returns:
            Dictionary with image information
        """
        try:
            image = Image.open(io.BytesIO(image_bytes))
            
            return {
                'format': image.format,
                'mode': image.mode,
                'width': image.width,
                'height': image.height,
                'size_bytes': len(image_bytes),
                'has_transparency': image.mode in ('RGBA', 'LA') or 'transparency' in image.info
            }
            
        except Exception as e:
            logger.error(f"Failed to get image info: {str(e)}")
            return {
                'format': 'unknown',
                'mode': 'unknown',
                'width': 0,
                'height': 0,
                'size_bytes': len(image_bytes),
                'has_transparency': False,
                'error': str(e)
            }
